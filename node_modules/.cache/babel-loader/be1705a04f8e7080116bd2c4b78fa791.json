{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexports.default = function (ExtendBase) {\n  return function (_ExtendBase) {\n    _inherits(ExpandRowResolver, _ExtendBase);\n\n    function ExpandRowResolver() {\n      _classCallCheck(this, ExpandRowResolver);\n\n      return _possibleConstructorReturn(this, (ExpandRowResolver.__proto__ || Object.getPrototypeOf(ExpandRowResolver)).apply(this, arguments));\n    }\n\n    _createClass(ExpandRowResolver, [{\n      key: \"resolveExpandRowProps\",\n      value: function resolveExpandRowProps() {\n        var _props = this.props,\n            expandRow = _props.expandRow,\n            expanded = _props.expanded,\n            onRowExpand = _props.onRowExpand,\n            onAllRowExpand = _props.onAllRowExpand,\n            isAnyExpands = _props.isAnyExpands;\n\n        if (expandRow) {\n          return _extends({}, expandRow, {\n            expanded: expanded,\n            onRowExpand: onRowExpand,\n            onAllRowExpand: onAllRowExpand,\n            isAnyExpands: isAnyExpands,\n            nonExpandable: expandRow.nonExpandable || []\n          });\n        }\n\n        return null;\n      }\n    }]);\n\n    return ExpandRowResolver;\n  }(ExtendBase);\n};","map":null,"metadata":{},"sourceType":"script"}